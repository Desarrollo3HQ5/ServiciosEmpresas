/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, AsyncSubject } from 'rxjs';
import jsQR from 'jsqr';
import { AS_COMPLETE, DRAW_RESULT, HAS_OWN_PROPERTY, OVERRIDES, PLAY_AUDIO } from './ngx-scanner-qrcode.helper';
import { CONFIG_DEFAULT, MEDIA_STREAM_DEFAULT } from './ngx-scanner-qrcode.default';
var NgxScannerQrcodeComponent = /** @class */ (function () {
    function NgxScannerQrcodeComponent() {
        /**
         * EventEmitter
         */
        this.error = new EventEmitter();
        this.event = new EventEmitter();
        /**
         * Input
         */
        this.src = CONFIG_DEFAULT.src;
        this.isAuto = CONFIG_DEFAULT.isAuto;
        this.isBeep = CONFIG_DEFAULT.isBeep;
        this.isAlwaysEmit = CONFIG_DEFAULT.isAlwaysEmit;
        this.config = CONFIG_DEFAULT;
        this.medias = CONFIG_DEFAULT.medias;
        /**
         * Export
         */
        this.isStart = false;
        this.isLoading = false;
        this.data = new BehaviorSubject({});
    }
    /**
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.overrideConfig();
        if (this.src) {
            this.loadImage(this.src);
        }
        else if (this.isAuto) {
            this.start();
        }
        this.resize();
    };
    /**
     * start
     * @return AsyncSubject
     */
    /**
     * start
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.start = /**
     * start
     * @return {?} AsyncSubject
     */
    function () {
        var _this = this;
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isStart) {
            // Reject
            AS_COMPLETE(as, false);
        }
        else {
            // Loading on
            this.status(false, true);
            /**
             * MediaStream
             * Use facingMode: environment to attemt to get the front camera on phones
             */
            navigator.mediaDevices.getUserMedia(this.medias).then((/**
             * @param {?} stream
             * @return {?}
             */
            function (stream) {
                _this.video.nativeElement.srcObject = stream;
                _this.video.nativeElement.onloadedmetadata = (/**
                 * @return {?}
                 */
                function () {
                    _this.video.nativeElement.play();
                    _this.requestAnimationFrame();
                    _this.status(true, false);
                    AS_COMPLETE(as, true);
                });
            })).catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.status(false, false);
                _this.eventEmit(false, error);
                AS_COMPLETE(as, false, error);
            }));
        }
        return as;
    };
    /**
     * stop
     * @return AsyncSubject
     */
    /**
     * stop
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.stop = /**
     * stop
     * @return {?} AsyncSubject
     */
    function () {
        this.eventEmit(null);
        this.status(false, false);
        /** @type {?} */
        var as = new AsyncSubject();
        try {
            this.removeCanvas();
            clearInterval(this.rAF_ID);
            ((/** @type {?} */ (this.video.nativeElement.srcObject))).getTracks().forEach((/**
             * @param {?} track
             * @return {?}
             */
            function (track) {
                track.stop();
                AS_COMPLETE(as, true);
            }));
        }
        catch (error) {
            this.eventEmit(false, error);
            AS_COMPLETE(as, false, (/** @type {?} */ (error)));
        }
        return as;
    };
    /**
     * play
     * @return AsyncSubject
     */
    /**
     * play
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.play = /**
     * play
     * @return {?} AsyncSubject
     */
    function () {
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isPause) {
            this.video.nativeElement.play();
            this.requestAnimationFrame();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    };
    /**
     * pause
     * @return AsyncSubject
     */
    /**
     * pause
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeComponent.prototype.pause = /**
     * pause
     * @return {?} AsyncSubject
     */
    function () {
        /** @type {?} */
        var as = new AsyncSubject();
        if (this.isStart) {
            clearInterval(this.rAF_ID);
            this.video.nativeElement.pause();
            AS_COMPLETE(as, true);
        }
        else {
            AS_COMPLETE(as, false);
        }
        return as;
    };
    /**
     * loadImage
     * @param src
     */
    /**
     * loadImage
     * @param {?} src
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.loadImage = /**
     * loadImage
     * @param {?} src
     * @return {?}
     */
    function (src) {
        var _this = this;
        /** @type {?} */
        var as = new AsyncSubject();
        // Loading on
        this.status(false, true);
        // Set the src of this Image object.
        /** @type {?} */
        var image = new Image();
        // Setting cross origin value to anonymous
        image.setAttribute('crossOrigin', 'anonymous');
        // When our image has loaded.
        image.onload = (/**
         * @return {?}
         */
        function () {
            _this.drawImage(image, (/**
             * @param {?} flag
             * @return {?}
             */
            function (flag) {
                _this.status(false, false);
                AS_COMPLETE(as, flag);
            }));
        });
        // Set src
        image.src = src;
        return as;
    };
    /**
     * window: resize
     * Draw again!
     */
    /**
     * window: resize
     * Draw again!
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.resize = /**
     * window: resize
     * Draw again!
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        window.addEventListener("resize", (/**
         * @return {?}
         */
        function () { return _this.data.subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (HAS_OWN_PROPERTY(res, 'location')) {
                DRAW_RESULT((/** @type {?} */ (res)), _this.canvas.nativeElement, _this.resultsPanel.nativeElement);
            }
        })); }));
    };
    /**
     * Override config
     * @return void
     */
    /**
     * Override config
     * @private
     * @return {?} void
     */
    NgxScannerQrcodeComponent.prototype.overrideConfig = /**
     * Override config
     * @private
     * @return {?} void
     */
    function () {
        if (HAS_OWN_PROPERTY(this.config, 'src'))
            this.src = this.config.src;
        if (HAS_OWN_PROPERTY(this.config, 'isAuto'))
            this.isAuto = this.config.isAuto;
        if (HAS_OWN_PROPERTY(this.config, 'isBeep'))
            this.isBeep = this.config.isBeep;
        if (HAS_OWN_PROPERTY(this.config, 'isAlwaysEmit'))
            this.isAlwaysEmit = this.config.isAlwaysEmit;
        if (HAS_OWN_PROPERTY(this.config, 'medias'))
            this.medias = OVERRIDES('medias', this.config, MEDIA_STREAM_DEFAULT);
    };
    /**
     * drawImage
     * @param element
     * @param callback
     */
    /**
     * drawImage
     * @private
     * @param {?} element
     * @param {?=} callback
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.drawImage = /**
     * drawImage
     * @private
     * @param {?} element
     * @param {?=} callback
     * @return {?}
     */
    function (element, callback) {
        var _this = this;
        if (callback === void 0) { callback = (/**
         * @return {?}
         */
        function () { }); }
        // Get the canvas element by using the getElementById method.
        /** @type {?} */
        var canvas = this.canvas.nativeElement;
        // Get a 2D drawing context for the canvas.
        /** @type {?} */
        var ctx = (/** @type {?} */ (canvas.getContext('2d', { willReadFrequently: true })));
        // HTMLImageElement size
        if (element instanceof HTMLImageElement) {
            canvas.width = element.naturalWidth;
            canvas.height = element.naturalHeight;
            element.style.visibility = '';
            this.video.nativeElement.style.visibility = 'hidden';
        }
        // HTMLVideoElement size
        if (element instanceof HTMLVideoElement) {
            canvas.width = element.videoWidth;
            canvas.height = element.videoHeight;
            element.style.visibility = '';
            this.canvas.nativeElement.style.visibility = 'hidden';
        }
        // Draw image
        ctx.drawImage(element, 0, 0, canvas.width, canvas.height);
        // Data image
        /** @type {?} */
        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        // Draw frame
        /** @type {?} */
        var code = jsQR(imageData.data, imageData.width, imageData.height, { inversionAttempts: "attemptBoth" });
        if (code) {
            DRAW_RESULT(code, Object.freeze(this.canvas.nativeElement), this.resultsPanel.nativeElement);
            // toBlob and emit data
            /** @type {?} */
            var EMIT_DATA = (/**
             * @return {?}
             */
            function () { return _this.eventEmit(tslib_1.__assign({}, code, { canvas: canvas })); });
            // HTMLImageElement
            if (element instanceof HTMLImageElement) {
                callback(true);
                EMIT_DATA();
                PLAY_AUDIO(this.isBeep);
            }
            // HTMLVideoElement
            if (element instanceof HTMLVideoElement) {
                if (this.isAlwaysEmit) {
                    EMIT_DATA();
                    PLAY_AUDIO(this.isBeep);
                }
                else if (code.data !== ((/** @type {?} */ (this.data.value)))['data']) {
                    EMIT_DATA();
                    PLAY_AUDIO(this.isBeep);
                }
            }
        }
        else {
            callback(false);
            this.removeCanvas();
        }
    };
    /**
     * removeCanvas
     */
    /**
     * removeCanvas
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.removeCanvas = /**
     * removeCanvas
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        Object.assign([], this.resultsPanel.nativeElement.childNodes).forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) { return _this.resultsPanel.nativeElement.removeChild(el); }));
    };
    /**
     * status
     * @param isStart
     * @param isLoading
     */
    /**
     * status
     * @private
     * @param {?} isStart
     * @param {?} isLoading
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.status = /**
     * status
     * @private
     * @param {?} isStart
     * @param {?} isLoading
     * @return {?}
     */
    function (isStart, isLoading) {
        this.isStart = isStart;
        this.isLoading = isLoading;
    };
    /**
     * eventEmit
     * @param response
     * @param error
     */
    /**
     * eventEmit
     * @private
     * @param {?=} response
     * @param {?=} error
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.eventEmit = /**
     * eventEmit
     * @private
     * @param {?=} response
     * @param {?=} error
     * @return {?}
     */
    function (response, error) {
        if (response === void 0) { response = false; }
        if (error === void 0) { error = false; }
        (response !== false) && this.data.next(response || { data: null });
        (response !== false) && this.event.emit(response || { data: null });
        (error !== false) && this.error.emit(error || null);
    };
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * requestAnimationFrame
     */
    /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * requestAnimationFrame
     * @private
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.requestAnimationFrame = /**
     * Single-thread
     * Loop Recording on Camera
     * Must be destroy request
     * requestAnimationFrame
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.rAF_ID = setInterval((/**
         * @return {?}
         */
        function () {
            if (_this.video.nativeElement.readyState === _this.video.nativeElement.HAVE_ENOUGH_DATA) {
                _this.drawImage(_this.video.nativeElement);
            }
        }), 40);
    };
    Object.defineProperty(NgxScannerQrcodeComponent.prototype, "isPause", {
        /**
         * Status of camera
         * @return boolean
         */
        get: /**
         * Status of camera
         * @return {?} boolean
         */
        function () {
            return this.isStart && this.video.nativeElement.paused;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxScannerQrcodeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.pause();
    };
    NgxScannerQrcodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-scanner-qrcode',
                    template: "<div #resultsPanel class=\"origin-overlay\"></div>\r\n<canvas #canvas class=\"origin-canvas\"></canvas>\r\n<video #video playsinline class=\"origin-video\"></video>",
                    host: { 'class': 'ngx-scanner-qrcode' },
                    exportAs: 'scanner',
                    inputs: ['src', 'isAuto', 'isBeep', 'isAlwaysEmit', 'config', 'medias'],
                    outputs: ['event', 'error'],
                    queries: {
                        video: new ViewChild('video'),
                        canvas: new ViewChild('canvas'),
                        resultsPanel: new ViewChild('resultsPanel')
                    },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".ngx-scanner-qrcode{width:100%;position:relative;background-color:#262626;display:flex;justify-content:center;align-items:center}.origin-overlay{position:absolute;width:100%;height:100%}.origin-canvas{-o-object-fit:contain;object-fit:contain;position:absolute;width:100%;height:100%}.origin-video{width:100%;height:100%}.qrcode-tooltip{position:absolute;z-index:2}.qrcode-tooltip:hover .qrcode-tooltip-temp{display:block;position:absolute}.qrcode-tooltip-temp{bottom:0;z-index:3;left:50%;padding:10px;display:none;width:-moz-max-content;width:max-content;word-wrap:break-word;max-width:450px;box-shadow:1px 1px 20px #000000e0;border-radius:5px;background-color:#000000d0;transform:translate(-50%);transform-style:preserve-3d;color:#fff;text-align:left}.qrcode-data{position:absolute;top:-20px;color:red}"]
                }] }
    ];
    return NgxScannerQrcodeComponent;
}());
export { NgxScannerQrcodeComponent };
if (false) {
    /**
     * Element
     * playsinline required to tell iOS safari we don't want fullscreen
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.video;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.canvas;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.resultsPanel;
    /**
     * EventEmitter
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.error;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.event;
    /**
     * Input
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.src;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isAuto;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isBeep;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isAlwaysEmit;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.config;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.medias;
    /**
     * Export
     * @type {?}
     */
    NgxScannerQrcodeComponent.prototype.isStart;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.isLoading;
    /** @type {?} */
    NgxScannerQrcodeComponent.prototype.data;
    /**
     * Private
     * @type {?}
     * @private
     */
    NgxScannerQrcodeComponent.prototype.rAF_ID;
}
//# sourceMappingURL=data:application/json;base64,