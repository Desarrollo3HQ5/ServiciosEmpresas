/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CAMERA_BEEP } from "./ngx-scanner-qrcode.default";
/**
 * OVERRIDES
 * \@param variableKey
 * \@param config
 * \@param defaultConfig
 * \@return
 * @type {?}
 */
export var OVERRIDES = (/**
 * @param {?} variableKey
 * @param {?} config
 * @param {?} defaultConfig
 * @return {?}
 */
function (variableKey, config, defaultConfig) {
    var _a;
    if (config && Object.keys(config[variableKey]).length) {
        for (var key in defaultConfig) {
            /** @type {?} */
            var cloneDeep = JSON.parse(JSON.stringify(tslib_1.__assign({}, config[variableKey], (_a = {}, _a[key] = ((/** @type {?} */ (defaultConfig)))[key], _a))));
            config[variableKey] = config[variableKey].hasOwnProperty(key) ? config[variableKey] : cloneDeep;
        }
        return config[variableKey];
    }
    else {
        return defaultConfig;
    }
});
/**
 * Rxjs complete
 * \@param as
 * \@param data
 * \@param error
 * @type {?}
 */
export var AS_COMPLETE = (/**
 * @param {?} as
 * @param {?} data
 * @param {?=} error
 * @return {?}
 */
function (as, data, error) {
    if (error === void 0) { error = null; }
    error ? as.error(error) : as.next(data);
    as.complete();
});
/**
 * CAMERA_BEEP
 * \@param isPlay
 * \@return
 * @type {?}
 */
export var PLAY_AUDIO = (/**
 * @param {?=} isPlay
 * @return {?}
 */
function (isPlay) {
    if (isPlay === void 0) { isPlay = false; }
    if (isPlay === false)
        return;
    /** @type {?} */
    var audio = new Audio(CAMERA_BEEP);
    // when the sound has been loaded, execute your code
    audio.oncanplaythrough = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var promise = audio.play();
        if (promise) {
            promise.catch((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.name === "NotAllowedError" || e.name === "NotSupportedError") {
                    // console.log(e.name);
                }
            }));
        }
    });
});
/**
 * HAS_OWN_PROPERTY
 * Fix issue vs ng v 6-7-8
 * Optional chaining (?.) just have on ng v 9++
 * eg: HAS_OWN_PROPERTY(config, 'frameOptions.style') // output: boolean
 * \@param obj
 * \@param propertyPath
 * \@return
 * @type {?}
 */
export var HAS_OWN_PROPERTY = (/**
 * @param {?} obj
 * @param {?} propertyPath
 * @return {?}
 */
function (obj, propertyPath) {
    /** @type {?} */
    var properties = propertyPath.split(".");
    for (var i = 0; i < properties.length; i++) {
        /** @type {?} */
        var prop = properties[i];
        if (!obj.hasOwnProperty(prop)) {
            return false;
        }
        else {
            obj = obj[prop];
        }
    }
    return true;
});
/**
 * DRAW_RESULT
 * \@param code
 * \@param oriCanvas
 * \@param elTarget
 * \@return
 * @type {?}
 */
export var DRAW_RESULT = (/**
 * @param {?} code
 * @param {?} oriCanvas
 * @param {?} elTarget
 * @return {?}
 */
function (code, oriCanvas, elTarget) {
    /** @type {?} */
    var widthZoom;
    /** @type {?} */
    var heightZoom;
    /** @type {?} */
    var oriWidth = oriCanvas.width;
    /** @type {?} */
    var oriHeight = oriCanvas.height;
    /** @type {?} */
    var oriWHRatio = oriWidth / oriHeight;
    /** @type {?} */
    var imgWidth = parseInt(getComputedStyle(oriCanvas).width);
    /** @type {?} */
    var imgHeight = parseInt(getComputedStyle(oriCanvas).height);
    /** @type {?} */
    var imgWHRatio = imgWidth / imgHeight;
    /** @type {?} */
    var cvs = document.createElement("canvas");
    /** @type {?} */
    var ctx = (/** @type {?} */ (cvs.getContext('2d', { willReadFrequently: true })));
    ctx.globalCompositeOperation = "destination-over";
    /** @type {?} */
    var loc = {};
    loc.x1 = code.location.topLeftCorner.x;
    loc.y1 = code.location.topLeftCorner.y;
    loc.x2 = code.location.topRightCorner.x;
    loc.y2 = code.location.topRightCorner.y;
    loc.x3 = code.location.bottomLeftCorner.x;
    loc.y3 = code.location.bottomLeftCorner.y;
    loc.x4 = code.location.bottomRightCorner.x;
    loc.y4 = code.location.bottomRightCorner.y;
    /** @type {?} */
    var locXArr = [loc.x1, loc.x2, loc.x3, loc.x4];
    /** @type {?} */
    var locYArr = [loc.y1, loc.y2, loc.y3, loc.y4];
    /** @type {?} */
    var maxX = Math.max(loc.x1, loc.x2, loc.x3, loc.x4);
    /** @type {?} */
    var minX = Math.min(loc.x1, loc.x2, loc.x3, loc.x4);
    /** @type {?} */
    var maxY = Math.max(loc.y1, loc.y2, loc.y3, loc.y4);
    /** @type {?} */
    var minY = Math.min(loc.y1, loc.y2, loc.y3, loc.y4);
    /** @type {?} */
    var minXToY = locYArr[locXArr.indexOf(minX)];
    /** @type {?} */
    var minYToX = locXArr[locYArr.indexOf(minY)];
    /** @type {?} */
    var maxXToY = locYArr[locXArr.indexOf(maxX)];
    /** @type {?} */
    var maxYToX = locXArr[locYArr.indexOf(maxY)];
    if (oriWHRatio > imgWHRatio) {
        widthZoom = imgWidth / oriWidth;
        heightZoom = imgWidth / oriWHRatio / oriHeight;
        cvs.style.top = minY * heightZoom + (imgHeight - imgWidth / oriWHRatio) * 0.5 + "px";
        cvs.style.left = minX * widthZoom + "px";
        cvs.width = (maxX - minX) * widthZoom;
        cvs.height = (maxY - minY) * widthZoom;
        cvs.style.width = (maxX - minX) * widthZoom + "px";
        cvs.style.height = (maxY - minY) * widthZoom + "px";
    }
    else {
        heightZoom = imgHeight / oriHeight;
        widthZoom = (imgHeight * oriWHRatio) / oriWidth;
        cvs.style.top = minY * heightZoom + "px";
        cvs.style.left = minX * widthZoom + (imgWidth - imgHeight * oriWHRatio) * 0.5 + "px";
        cvs.width = (maxX - minX) * heightZoom;
        cvs.height = (maxY - minY) * heightZoom;
        cvs.style.width = (maxX - minX) * heightZoom + "px";
        cvs.style.height = (maxY - minY) * heightZoom + "px";
    }
    cvs.style.zIndex = '1';
    cvs.style.position = "absolute";
    ctx.fillStyle = "#55f02880";
    /** @type {?} */
    var isSquare = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var left = Math.floor(loc.x1) - Math.floor(loc.x3);
        /** @type {?} */
        var right = Math.floor(loc.x2) - Math.floor(loc.x4);
        return ~~left <= 1 && ~~right <= 1 && code.location.topLeftFinderPattern.y == code.location.topRightFinderPattern.y;
    });
    if (!isSquare()) {
        /** @type {?} */
        var h1 = minXToY * heightZoom - minY * heightZoom;
        /** @type {?} */
        var w1 = minYToX * widthZoom - minX * widthZoom;
        /** @type {?} */
        var h2 = maxXToY * heightZoom - minY * heightZoom;
        /** @type {?} */
        var w2 = maxYToX * widthZoom - minX * widthZoom;
        ctx.beginPath();
        ctx.moveTo(0, h1);
        ctx.lineTo(w1, 0);
        ctx.lineTo(cvs.width, h2);
        ctx.lineTo(w2, cvs.height);
        ctx.fill();
    }
    else {
        ctx.fillRect(0, 0, cvs.width, cvs.height);
    }
    // Tooltip result
    /** @type {?} */
    var qrcodeTooltipTemp = document.createElement('div');
    qrcodeTooltipTemp.setAttribute('class', 'qrcode-tooltip-temp');
    qrcodeTooltipTemp.innerHTML = code.data;
    // Tooltip box
    /** @type {?} */
    var qrcodeTooltip = document.createElement('div');
    qrcodeTooltip.setAttribute('class', 'qrcode-tooltip');
    qrcodeTooltip.appendChild(qrcodeTooltipTemp);
    heightZoom = imgHeight / oriHeight;
    widthZoom = (imgHeight * oriWHRatio) / oriWidth;
    qrcodeTooltip.style.fontSize = widthZoom * 15 + 'px';
    qrcodeTooltip.style.top = minY * heightZoom + "px";
    qrcodeTooltip.style.left = minX * widthZoom + (imgWidth - imgHeight * oriWHRatio) * 0.5 + "px";
    qrcodeTooltip.style.width = (maxX - minX) * heightZoom + "px";
    qrcodeTooltip.style.height = (maxY - minY) * heightZoom + "px";
    // Result text
    /** @type {?} */
    var resultText = document.createElement('input');
    resultText.value = code.data;
    resultText.style.zIndex = '3';
    resultText.style.fontSize = widthZoom * 15 + 'px';
    resultText.style.color = 'red';
    resultText.style.border = 'none';
    resultText.style.outline = 'none';
    resultText.style.position = 'absolute';
    resultText.style.background = '#ffffff00';
    resultText.style.width = '-webkit-fill-available';
    resultText.style.minWidth = qrcodeTooltip.style.width;
    resultText.setAttribute('class', 'qrcode-data');
    // Set position result text
    resultText.style.top = minY * heightZoom + (-20 * heightZoom) + "px";
    resultText.style.left = minX * widthZoom + (imgWidth - imgHeight * oriWHRatio) * 0.5 + "px";
    if (elTarget) {
        elTarget.innerHTML = '';
        elTarget.appendChild(cvs);
        elTarget.appendChild(resultText);
        elTarget.appendChild(qrcodeTooltip);
    }
    return cvs;
});
//# sourceMappingURL=data:application/json;base64,