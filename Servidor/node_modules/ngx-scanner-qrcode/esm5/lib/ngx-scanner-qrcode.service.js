/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { AS_COMPLETE } from './ngx-scanner-qrcode.helper';
import * as i0 from "@angular/core";
var NgxScannerQrcodeService = /** @class */ (function () {
    function NgxScannerQrcodeService() {
    }
    /**
     * Load files
     * @param files
     * @return AsyncSubject
     */
    /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    NgxScannerQrcodeService.prototype.loadFiles = /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    function (files) {
        var _this = this;
        if (files === void 0) { files = []; }
        /** @type {?} */
        var as = new AsyncSubject();
        Promise.all(Object.assign([], files).map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return _this.readAsDataURL(m); }))).then((/**
         * @param {?} img
         * @return {?}
         */
        function (img) { return AS_COMPLETE(as, img); })).catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return AS_COMPLETE(as, null, error); }));
        return as;
    };
    /**
     * readAsDataURL
     * @param file
     * @return Promise
     */
    /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    NgxScannerQrcodeService.prototype.readAsDataURL = /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    function (file) {
        /** drawImage **/
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var fileReader = new FileReader();
            fileReader.onload = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var objectFile = {
                    name: file.name,
                    file: file,
                    base64: (/** @type {?} */ (fileReader.result)),
                    url: URL.createObjectURL(file)
                };
                resolve(objectFile);
            });
            fileReader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return reject(error); });
            fileReader.readAsDataURL(file);
        }));
    };
    NgxScannerQrcodeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ NgxScannerQrcodeService.ngInjectableDef = i0.defineInjectable({ factory: function NgxScannerQrcodeService_Factory() { return new NgxScannerQrcodeService(); }, token: NgxScannerQrcodeService, providedIn: "root" });
    return NgxScannerQrcodeService;
}());
export { NgxScannerQrcodeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nhbm5lci1xcmNvZGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBSTFEO0lBQUE7S0FzQ0M7SUFqQ0M7Ozs7T0FJRzs7Ozs7O0lBQ0ksMkNBQVM7Ozs7O0lBQWhCLFVBQWlCLEtBQWtCO1FBQW5DLGlCQUlDO1FBSmdCLHNCQUFBLEVBQUEsVUFBa0I7O1lBQzNCLEVBQUUsR0FBRyxJQUFJLFlBQVksRUFBeUI7UUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFyQixDQUFxQixFQUFDLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxHQUEwQixJQUFLLE9BQUEsV0FBVyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBcEIsQ0FBb0IsRUFBQyxDQUFDLEtBQUs7Ozs7UUFBQyxVQUFDLEtBQVUsSUFBSyxPQUFBLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUE1QixDQUE0QixFQUFDLENBQUM7UUFDckwsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNLLCtDQUFhOzs7Ozs7SUFBckIsVUFBc0IsSUFBVTtRQUM5QixpQkFBaUI7UUFDakIsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTs7Z0JBQzNCLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRTtZQUNuQyxVQUFVLENBQUMsTUFBTTs7O1lBQUc7O29CQUNaLFVBQVUsR0FBRztvQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLElBQUksRUFBRSxJQUFJO29CQUNWLE1BQU0sRUFBRSxtQkFBQSxVQUFVLENBQUMsTUFBTSxFQUFVO29CQUNuQyxHQUFHLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7aUJBQy9CO2dCQUNELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUEsQ0FBQTtZQUNELFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUcsVUFBQyxLQUFVLElBQUssT0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQWIsQ0FBYSxDQUFBLENBQUM7WUFDbkQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7O2dCQXJDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7a0NBUkQ7Q0E0Q0MsQUF0Q0QsSUFzQ0M7U0FuQ1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQVNfQ09NUExFVEUgfSBmcm9tICcuL25neC1zY2FubmVyLXFyY29kZS5oZWxwZXInO1xyXG5pbXBvcnQgeyBTY2FubmVyUVJDb2RlUmVzdWx0IH0gZnJvbSAnLi9uZ3gtc2Nhbm5lci1xcmNvZGUub3B0aW9ucyc7XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4U2Nhbm5lclFyY29kZVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGZpbGVzXHJcbiAgICogQHBhcmFtIGZpbGVzIFxyXG4gICAqIEByZXR1cm4gQXN5bmNTdWJqZWN0XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRGaWxlcyhmaWxlczogRmlsZVtdID0gW10pOiBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVJlc3VsdFtdPiB7XHJcbiAgICBjb25zdCBhcyA9IG5ldyBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVJlc3VsdFtdPigpO1xyXG4gICAgUHJvbWlzZS5hbGwoT2JqZWN0LmFzc2lnbihbXSwgZmlsZXMpLm1hcChtID0+IHRoaXMucmVhZEFzRGF0YVVSTChtKSkpLnRoZW4oKGltZzogU2Nhbm5lclFSQ29kZVJlc3VsdFtdKSA9PiBBU19DT01QTEVURShhcywgaW1nKSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IEFTX0NPTVBMRVRFKGFzLCBudWxsLCBlcnJvcikpO1xyXG4gICAgcmV0dXJuIGFzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVhZEFzRGF0YVVSTFxyXG4gICAqIEBwYXJhbSBmaWxlIFxyXG4gICAqIEByZXR1cm4gUHJvbWlzZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVhZEFzRGF0YVVSTChmaWxlOiBGaWxlKTogUHJvbWlzZTxTY2FubmVyUVJDb2RlUmVzdWx0PiB7XHJcbiAgICAvKiogZHJhd0ltYWdlICoqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdEZpbGUgPSB7XHJcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICAgICAgYmFzZTY0OiBmaWxlUmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcsXHJcbiAgICAgICAgICB1cmw6IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlc29sdmUob2JqZWN0RmlsZSk7XHJcbiAgICAgIH1cclxuICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gKGVycm9yOiBhbnkpID0+IHJlamVjdChlcnJvcik7XHJcbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgIH0pXHJcbiAgfVxyXG59Il19