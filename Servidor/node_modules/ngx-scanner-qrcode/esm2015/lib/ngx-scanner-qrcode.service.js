/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { AS_COMPLETE } from './ngx-scanner-qrcode.helper';
import * as i0 from "@angular/core";
export class NgxScannerQrcodeService {
    /**
     * Load files
     * @param {?=} files
     * @return {?} AsyncSubject
     */
    loadFiles(files = []) {
        /** @type {?} */
        const as = new AsyncSubject();
        Promise.all(Object.assign([], files).map((/**
         * @param {?} m
         * @return {?}
         */
        m => this.readAsDataURL(m)))).then((/**
         * @param {?} img
         * @return {?}
         */
        (img) => AS_COMPLETE(as, img))).catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => AS_COMPLETE(as, null, error)));
        return as;
    }
    /**
     * readAsDataURL
     * @private
     * @param {?} file
     * @return {?} Promise
     */
    readAsDataURL(file) {
        /** drawImage **/
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const fileReader = new FileReader();
            fileReader.onload = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const objectFile = {
                    name: file.name,
                    file: file,
                    base64: (/** @type {?} */ (fileReader.result)),
                    url: URL.createObjectURL(file)
                };
                resolve(objectFile);
            });
            fileReader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            (error) => reject(error));
            fileReader.readAsDataURL(file);
        }));
    }
}
NgxScannerQrcodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ NgxScannerQrcodeService.ngInjectableDef = i0.defineInjectable({ factory: function NgxScannerQrcodeService_Factory() { return new NgxScannerQrcodeService(); }, token: NgxScannerQrcodeService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nhbm5lci1xcmNvZGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXNjYW5uZXItcXJjb2RlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBTzFELE1BQU07Ozs7OztJQU9HLFNBQVMsQ0FBQyxRQUFnQixFQUFFOztjQUMzQixFQUFFLEdBQUcsSUFBSSxZQUFZLEVBQXlCO1FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSTs7OztRQUFDLENBQUMsR0FBMEIsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUs7Ozs7UUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUMsQ0FBQztRQUNyTCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7Ozs7SUFPTyxhQUFhLENBQUMsSUFBVTtRQUM5QixpQkFBaUI7UUFDakIsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7O2tCQUMvQixVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDbkMsVUFBVSxDQUFDLE1BQU07OztZQUFHLEdBQUcsRUFBRTs7c0JBQ2pCLFVBQVUsR0FBRztvQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLElBQUksRUFBRSxJQUFJO29CQUNWLE1BQU0sRUFBRSxtQkFBQSxVQUFVLENBQUMsTUFBTSxFQUFVO29CQUNuQyxHQUFHLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7aUJBQy9CO2dCQUNELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN0QixDQUFDLENBQUEsQ0FBQTtZQUNELFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQyxFQUFDLENBQUE7SUFDSixDQUFDOzs7WUFyQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQVNfQ09NUExFVEUgfSBmcm9tICcuL25neC1zY2FubmVyLXFyY29kZS5oZWxwZXInO1xyXG5pbXBvcnQgeyBTY2FubmVyUVJDb2RlUmVzdWx0IH0gZnJvbSAnLi9uZ3gtc2Nhbm5lci1xcmNvZGUub3B0aW9ucyc7XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4U2Nhbm5lclFyY29kZVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGZpbGVzXHJcbiAgICogQHBhcmFtIGZpbGVzIFxyXG4gICAqIEByZXR1cm4gQXN5bmNTdWJqZWN0XHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRGaWxlcyhmaWxlczogRmlsZVtdID0gW10pOiBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVJlc3VsdFtdPiB7XHJcbiAgICBjb25zdCBhcyA9IG5ldyBBc3luY1N1YmplY3Q8U2Nhbm5lclFSQ29kZVJlc3VsdFtdPigpO1xyXG4gICAgUHJvbWlzZS5hbGwoT2JqZWN0LmFzc2lnbihbXSwgZmlsZXMpLm1hcChtID0+IHRoaXMucmVhZEFzRGF0YVVSTChtKSkpLnRoZW4oKGltZzogU2Nhbm5lclFSQ29kZVJlc3VsdFtdKSA9PiBBU19DT01QTEVURShhcywgaW1nKSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IEFTX0NPTVBMRVRFKGFzLCBudWxsLCBlcnJvcikpO1xyXG4gICAgcmV0dXJuIGFzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogcmVhZEFzRGF0YVVSTFxyXG4gICAqIEBwYXJhbSBmaWxlIFxyXG4gICAqIEByZXR1cm4gUHJvbWlzZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVhZEFzRGF0YVVSTChmaWxlOiBGaWxlKTogUHJvbWlzZTxTY2FubmVyUVJDb2RlUmVzdWx0PiB7XHJcbiAgICAvKiogZHJhd0ltYWdlICoqL1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIGZpbGVSZWFkZXIub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdEZpbGUgPSB7XHJcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgICAgICBmaWxlOiBmaWxlLFxyXG4gICAgICAgICAgYmFzZTY0OiBmaWxlUmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcsXHJcbiAgICAgICAgICB1cmw6IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlc29sdmUob2JqZWN0RmlsZSk7XHJcbiAgICAgIH1cclxuICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gKGVycm9yOiBhbnkpID0+IHJlamVjdChlcnJvcik7XHJcbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgIH0pXHJcbiAgfVxyXG59Il19